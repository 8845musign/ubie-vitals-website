---
type Prop = {
  name: string;
  type: string;
  defaultValue: string;
  required: boolean;
  description: string;
};

interface Props {
  propsArray: Prop[];
}

const { propsArray } = Astro.props;
---

{
  propsArray.length === 0 ? (
    <p>Propsの説明がありません</p>
  ) : (
    <table class="table">
      <thead>
        <tr>
          <th>Prop Name</th>
          <th>Type</th>
          <th>Default</th>
          <th>required</th>
          <th>Description</th>
        </tr>
      </thead>
      <tbody>
        {propsArray.map((prop) => (
          <tr>
            <td>{prop.name}</td>
            <td>
              {Array.isArray(prop.type) ? (
                prop.type.map((type) => {
                  return <code>{type}</code>;
                })
              ) : (
                <code>{prop.type}</code>
              )}
            </td>
            <td>
              <code>{prop.defaultValue || '-'}</code>
            </td>
            <td>{prop.required ? 'YES' : 'NO'}</td>
            <td>{prop.description || '-'}</td>
          </tr>
        ))}
      </tbody>
    </table>
  )
}

<style>
  table {
    width: 100%;
    text-align: left;
    border-collapse: collapse;
  }

  thead > tr {
    background-color: var(--color-background-gray);
  }

  th {
    padding: var(--size-spacing-xs);
    font-size: var(--text-body-sm-size);
    line-height: var(--text-body-sm-tight-line);
    color: var(--color-ubie-black-500);
  }

  td {
    padding: var(--size-spacing-xs);
    font-size: var(--text-body-sm-size);
    line-height: var(--text-body-sm-tight-line);
    word-break: break-word;
  }

  tbody > tr > td:first-child {
    font-weight: bold;
  }

  td > code {
    margin: 3px;
  }
</style>
